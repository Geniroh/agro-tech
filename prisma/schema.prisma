generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?      @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  password      String?
  role          UserRole     @default(USER)
  accounts      Account[]
  Reply         Reply[]
  Discussion    Discussion[]

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Innovation {
  id                       String   @id @default(auto()) @map("_id") @db.ObjectId
  productName              String
  yearInvented             String
  country                  String
  cost                     Float
  productChain             String[]
  productPhase             String
  productUse               String[]
  productDescription       String
  productMedia             Json[]
  isExample                Boolean
  productExample           Json[]
  productInstruction       Json[]
  productInventor          Json[]
  productSupplier          Json[]
  productGuidelines        Json[]
  isGenderFriendly         Boolean?
  productGenderDescription String?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  @@map("innovations")
}

model Reply {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  authorId  String   @db.ObjectId
  likes     Int?     @default(0)
  dislikes  Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author       User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  discussionId String     @db.ObjectId
  Discussion   Discussion @relation(fields: [discussionId], references: [id])

  @@map("replies")
}

model Discussion {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  content  String
  authorId String  @db.ObjectId
  likes    Int?    @default(0)
  dislikes Int?    @default(0)
  replies  Reply[]

  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("discussions")
}

model File {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  filename  String
  size      String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("files")
}
