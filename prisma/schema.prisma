generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                   String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                 String?
  email                String?                @unique
  emailVerified        DateTime?              @map("email_verified")
  image                String?
  password             String?
  role                 UserRole               @default(USER)
  accounts             Account[]
  // Reply                Reply[]
  // Discussion           Discussion[]
  reactions            CommentReaction[]
  replies              CommentReply[]
  CommentReplyReaction CommentReplyReaction[]
  innovationReaction   InnovationReaction[]

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Innovation {
  id                       String                 @id @default(auto()) @map("_id") @db.ObjectId
  productName              String
  yearInvented             String
  country                  String
  cost                     Float
  productChain             String
  productPhase             String
  likes                    Int?                   @default(0)
  dislikes                 Int?                   @default(0)
  productUse               String[]
  productDescription       String
  productMedia             Json[]
  isExample                Boolean
  productExample           Json[]                 @default([])
  productInstruction       Json[]                 @default([])
  productInventor          Json[]                 @default([])
  productSupplier          Json[]                 @default([])
  productGuidelines        Json[]                 @default([])
  isGenderFriendly         Boolean?
  productGenderDescription String?
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  discussions              InnovationDiscussion[]
  reactions                InnovationReaction[]

  @@map("innovations")
}

// model Reply {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   content   String
//   authorId  String   @db.ObjectId
//   likes     Int?     @default(0)
//   dislikes  Int?     @default(0)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   author       User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
//   discussionId String     @db.ObjectId
//   Discussion   Discussion @relation(fields: [discussionId], references: [id])

//   @@map("replies")
// }

// model Discussion {
//   id       String  @id @default(auto()) @map("_id") @db.ObjectId
//   title    String
//   content  String
//   authorId String  @db.ObjectId
//   likes    Int?    @default(0)
//   dislikes Int?    @default(0)
//   replies  Reply[]

//   author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@map("discussions")
// }

model InnovationComment {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  username  String
  email     String
  likes     Int               @default(0)
  dislikes  Int               @default(0)
  message   String
  topReply  String?           @db.ObjectId
  // replies   Json[]            @default([])
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  reactions CommentReaction[]
  replies   CommentReply[]

  innovationDiscussionId String               @db.ObjectId
  InnovationDiscussion   InnovationDiscussion @relation(fields: [innovationDiscussionId], references: [id])

  @@map("innovationComment")
}

model InnovationDiscussion {
  id            String              @id @default(auto()) @map("_id") @db.ObjectId
  innovation_id String              @unique @db.ObjectId
  likes         Int                 @default(0)
  dislikes      Int                 @default(0)
  topComment    String?             @db.ObjectId
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  comments      InnovationComment[]
  Innovation    Innovation          @relation(fields: [innovation_id], references: [id])

  @@map("innovationDiscussion")
}

model File {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  filename  String
  size      String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("files")
}

model CommentReaction {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  userId    String            @db.ObjectId
  commentId String            @db.ObjectId
  reaction  String // 'like' or 'dislike'
  User      User              @relation(fields: [userId], references: [id])
  Comment   InnovationComment @relation(fields: [commentId], references: [id])
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@unique([userId, commentId])
  @@map("commentReaction")
}

model CommentReply {
  id        String                 @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  likes     Int?                   @default(0)
  dislikes  Int?                   @default(0)
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
  userId    String                 @db.ObjectId
  commentId String                 @db.ObjectId
  User      User                   @relation(fields: [userId], references: [id])
  Comment   InnovationComment      @relation(fields: [commentId], references: [id])
  reactions CommentReplyReaction[]

  @@map("commentReply")
}

model CommentReplyReaction {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  userId    String       @db.ObjectId
  replyId   String       @db.ObjectId
  reaction  String // 'like' or 'dislike'
  User      User         @relation(fields: [userId], references: [id])
  Reply     CommentReply @relation(fields: [replyId], references: [id])
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@unique([userId, replyId])
  @@map("commentReplyReaction")
}

model InnovationReaction {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  userId       String     @db.ObjectId
  innovationId String     @db.ObjectId
  reaction     String // 'like' or 'dislike'
  User         User       @relation(fields: [userId], references: [id])
  Innovation   Innovation @relation(fields: [innovationId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())

  @@unique([userId, innovationId])
  @@map("innovationReaction")
}
